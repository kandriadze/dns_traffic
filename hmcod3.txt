import sqlite3

class Search:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()

    def search_database(self, keyword):
        query = f"SELECT * FROM library WHERE title LIKE '%{keyword}%' OR artist LIKE '%{keyword}%' OR album LIKE '%{keyword}%'"
        self.cursor.execute(query)
        library = self.cursor.fetchall()
        query = f"SELECT * FROM song WHERE title LIKE '%{keyword}%' OR artist LIKE '%{keyword}%' OR album LIKE '%{keyword}%'"
        self.cursor.execute(query)
        songs = self.cursor.fetchall()
        query = f"SELECT * FROM album WHERE title LIKE '%{keyword}%' OR artist LIKE '%{keyword}%'"
        self.cursor.execute(query)
        albums = self.cursor.fetchall()
        query = f"SELECT * FROM artist WHERE name LIKE '%{keyword}%'"
        self.cursor.execute(query)
        artists = self.cursor.fetchall()
        query = f"SELECT * FROM playlist WHERE name LIKE '%{keyword}%'"
        self.cursor.execute(query)
        playlists = self.cursor.fetchall()
        query = f"SELECT * FROM favorites WHERE title LIKE '%{keyword}%' OR artist LIKE '%{keyword}%' OR album LIKE '%{keyword}%'"
        self.cursor.execute(query)
        favorites = self.cursor.fetchall()

        result = {
            'library': library,
            'songs': songs,
            'albums': albums,
            'artists': artists,
            'playlists': playlists,
            'favorites': favorites
        }

        # Check if any results were found
        if any(result.values()):
            return result
        else:
            return None


import click
from library import Library
from album import Album
from artist import Artist
from song import Song
from playlist import Playlist
from favorites import Favorites
from search import Search

@click.group()
def cli():
    pass

@cli.command()
@click.argument('db_path')
@click.argument('directories', nargs=-1)
def scan_library(db_path, directories):
    library = Library(db_path)
    for directory in directories:
        library.scan_directory(directory)

@cli.command()
@click.argument('db_path')
@click.argument('album_title')
@click.option('--artist', default=None, help='Name of the artist')
@click.option('--genre', default=None, help='Album genre')
@click.option('--year', default=None, help='Album year')
@click.option('--album_cover', default=None, help='Path to album cover image file')
def add_album(db_path, album_title, artist, genre, year, album_cover):
    album = Album(db_path)
    album.add(album_title, artist, genre, year, album_cover)

@cli.command()
@click.argument('db_path')
@click.argument('album_title')
@click.option('--artist', default=None, help='New artist name')
@click.option('--genre', default=None, help='New genre')
@click.option('--year', default=None, help='New year')
@click.option('--album_cover', default=None, help='Path to new album cover image file')
def modify_album(db_path, album_title, artist, genre, year, album_cover):
    album = Album(db_path)
    album.modify(album_title, artist, genre, year, album_cover)

@cli.command()
@click.argument('db_path')
@click.argument('album_title')
def delete_album(db_path, album_title):
    album = Album(db_path)
    album.delete(album_title)

@cli.command()
@click.argument('db_path')
@click.argument('artist_name')
@click.option('--genre', default=None, help='Artist genre')
@click.option('--year', default=None, help='Artist year')
@click.option('--bio', default=None, help='Artist biography')
def add_artist(db_path, artist_name, genre, year, bio):
    artist = Artist(db_path)
    artist.add(artist_name, genre, year, bio)

@cli.command()
@click.argument('db_path')
@click.argument('artist_name')
@click.option('--genre', default=None, help='New genre')
@click.option('--year', default=None, help='New year')
@click.option('--bio', default=None, help='New biography')
def modify_artist(db_path, artist_name, genre, year, bio):
    artist = Artist(db_path)
    artist.modify(artist_name, genre, year, bio)

@cli.command()
@click.argument('db_path')
@click.argument('artist_name')
def delete_artist(db_path, artist_name):
    artist = Artist(db_path)
    artist.delete(artist_name)

@cli.command()
@click.argument('db_path')
@click.argument('title')
@click.option('--artist', default=None, help='Song artist')
@click.option('--album', default=None, help='Song album')
@click.option('--genre', default=None, help='Song genre')
@click.option('--year', default=None, help='Song year')
@click.option('--track', default=None, help='Song track number')
@click.option('--album_cover', default=None, help='Path to album cover image file')
@click.argument('file_path')
def add_song(db_path, title, artist, album, genre, year, track, album_cover, file_path):
    song = Song(db_path)
    song.add(title, artist, album, genre, year, track, album_cover, file_path)


