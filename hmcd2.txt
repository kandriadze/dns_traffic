import sqlite3
import mutagen

class Song:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self.cur = self.conn.cursor()

    def __del__(self):
        self.conn.close()

    def add_song(self, filename, title='Unknown', artist='Unknown', album='Unknown', length='Unknown'):
        self.cur.execute("SELECT id FROM artist WHERE name = ?", (artist,))
        artist_id = self.cur.fetchone()
        if not artist_id:
            self.cur.execute("INSERT INTO artist (name) VALUES (?)", (artist,))
            artist_id = self.cur.lastrowid
        else:
            artist_id = artist_id[0]
        self.cur.execute("SELECT id FROM album WHERE title = ? AND artist_id = ?", (album, artist_id))
        album_id = self.cur.fetchone()
        if not album_id:
            self.cur.execute("INSERT INTO album (title, artist_id) VALUES (?, ?)", (album, artist_id))
            album_id = self.cur.lastrowid
        else:
            album_id = album_id[0]
        self.cur.execute("INSERT INTO song (filename, title, artist_id, album_id, length) VALUES (?, ?, ?, ?, ?)", (filename, title, artist_id, album_id, length))
        self.conn.commit()

    def delete_song(self, song_id):
        self.cur.execute("SELECT filename FROM song WHERE id = ?", (song_id,))
        filename = self.cur.fetchone()
        if filename:
            self.cur.execute("DELETE FROM song WHERE id = ?", (song_id,))
            self.conn.commit()
            try:
                audio = mutagen.File(filename[0])
                if audio:
                    audio.delete()
            except Exception as e:
                print(f"Error deleting file {filename[0]}: {e}")
        else:
            print(f"No song found with ID {song_id}")

    def modify_tag(self, song_id, field, value):
        self.cur.execute("SELECT filename FROM song WHERE id = ?", (song_id,))
        filename = self.cur.fetchone()
        if filename:
            try:
                audio = mutagen.File(filename[0])
                if audio:
                    audio[field] = value
                    audio.save()
            except Exception as e:
                print(f"Error modifying tag for {filename[0]}: {e}")
        else:
            print(f"No song found with ID {song_id}")

    def display_songs(self):
        self.cur.execute("SELECT song.title, artist.name, album.title, song.length FROM song JOIN artist ON song.artist_id = artist.id JOIN album ON song.album_id = album.id")
        rows = self.cur.fetchall()
        for row in rows:
            print(f"{row[0]} - {row[1]} - {row[2]} - {row[3]}")

import sqlite3

class Favorites:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self.cur = self.conn.cursor()

    def __del__(self):
        self.conn.close()

    def add_to_favorites(self, song_id):
        self.cur.execute("INSERT INTO favorites (song_id) VALUES (?)", (song_id,))
        self.conn.commit()

    def delete_from_favorites(self, song_id):
        self.cur.execute("DELETE FROM favorites WHERE song_id = ?", (song_id,))
        self.conn.commit()

    def display_favorites(self):
        self.cur.execute("SELECT song.title, artist.name, album.title, song.length FROM favorites JOIN song ON favorites.song_id = song.id JOIN artist ON song.artist_id = artist.id JOIN album ON song.album_id = album.id")
        rows = self.cur.fetchall()
        if rows:
            print("Favorites:")
            for row in rows:
                print(f"{row[0]} - {row[1]} - {row[2]} - {row[3]}")
        else:
            print("No songs in favorites")


import sqlite3

class Playlist:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self.cur = self.conn.cursor()

    def __del__(self):
        self.conn.close()

    def add_playlist(self, name):
        self.cur.execute("INSERT INTO playlist (name) VALUES (?)", (name,))
        self.conn.commit()

    def delete_playlist(self, name):
        self.cur.execute("DELETE FROM playlist WHERE name = ?", (name,))
        self.conn.commit()

    def add_to_playlist(self, playlist_name, song_id):
        playlist_id = self._get_playlist_id(playlist_name)
        if playlist_id:
            self.cur.execute("INSERT INTO playlist_song (playlist_id, song_id) VALUES (?, ?)", (playlist_id, song_id))
            self.conn.commit()
            print(f"Added song with ID {song_id} to playlist '{playlist_name}'")
        else:
            print(f"Playlist '{playlist_name}' does not exist")

    def delete_from_playlist(self, playlist_name, song_id):
        playlist_id = self._get_playlist_id(playlist_name)
        if playlist_id:
            self.cur.execute("DELETE FROM playlist_song WHERE playlist_id = ? AND song_id = ?", (playlist_id, song_id))
            self.conn.commit()
            print(f"Deleted song with ID {song_id} from playlist '{playlist_name}'")
        else:
            print(f"Playlist '{playlist_name}' does not exist")

    def display_playlist(self, name):
        playlist_id = self._get_playlist_id(name)
        if playlist_id:
            self.cur.execute("SELECT song.title, artist.name, album.title, song.length FROM playlist_song JOIN song ON playlist_song.song_id = song.id JOIN artist ON song.artist_id = artist.id JOIN album ON song.album_id = album.id WHERE playlist_song.playlist_id = ?", (playlist_id,))
            rows = self.cur.fetchall()
            if rows:
                print(f"Playlist '{name}':")
                for row in rows:
                    print(f"{row[0]} - {row[1]} - {row[2]} - {row[3]}")
            else:
                print(f"No songs in playlist '{name}'")
        else:
            print(f"Playlist '{name}' does not exist")

    def display_all_playlists(self):
        self.cur.execute("SELECT name FROM playlist")
        rows = self.cur.fetchall()
        if rows:
            print("Playlists:")
            for row in rows:
                self.display_playlist(row[0])
        else:
            print("No playlists exist")

    def _get_playlist_id(self, name):
        self.cur.execute("SELECT id FROM playlist WHERE name = ?", (name,))
        row = self.cur.fetchone()
        if row:
            return row[0]
        else:
            return None
